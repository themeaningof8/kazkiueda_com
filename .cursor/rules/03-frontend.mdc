---
description: 
globs: *.tsx,*.jsx
alwaysApply: false
---
# 🎨 フロントエンド開発

**パッケージインストール時には必ずパッケージの最新情報を`deepwiki`で取得してから作業を始めること**

## React + TypeScript

### コンポーネント設計
- **単一責任**: 300行以下、単一責任原則
- **Compound Components**: 原則単一ファイル、分割時は components/ サブフォルダ
- **早期リターン**: 条件付きレンダリングで可読性向上
- **export統一**: 最下部で一括export

### 状態管理戦略
```
状態共有が必要？
├─ No → useState/useReducer
└─ Yes
    ├─ 親子関係のみ？ → propsで渡す
    ├─ サーバーデータ？ → React Query/SWR
    ├─ フォームデータ？ → React Hook Form
    ├─ 計算値？ → useMemo/useCallback
    └─ Zustand/Context適用
```

### パフォーマンス最適化
- **メモ化**: 10ms以上の計算でuseMemo使用
- **関数安定化**: 子コンポーネント用関数はuseCallback
- **React.memo**: props変更頻度で判断

### TypeScript型設計
- **strict モード必須**: TypeScript 5.0以上
- **ジェネリクス**: 再利用可能な型設計
- **Union型 + Type Guards**: 型安全性確保
- **Result型パターン**: エラーハンドリング

## HTML + セマンティック構造

### 必須要素
- **セマンティックタグ**: article, section, nav, main, header, footer
- **見出し階層**: h1-h6で論理的構造
- **適切な要素選択**: button(アクション) vs a(ナビゲーション)

### アクセシビリティ
- **フォーム**: label + htmlFor 必須
- **画像**: alt属性 必須
- **インタラクティブ要素**: 適切なrole
- **コンテキスト**: aria-label, aria-describedby

## スタイリング統合

### TailwindCSS優先
- **TailwindCSS 4.0以上** 必須: tailwindcssとは別にViteプラグインが必要なので注意
- **ユーティリティ最大活用**: 標準クラス使用

### cn関数必須使用
```typescript
// src/lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// 使用例
const Card = ({ className, isActive, ...props }) => (
  <div
    className={cn(
      "rounded-lg border bg-white p-4 shadow-sm",
      isActive && "border-blue-500 bg-blue-50",
      className
    )}
    {...props}
  />
);
```

### 制約事項
- **インラインスタイル禁止**: ライブラリ制約時のみ例外
- **カスタムCSS最小化**: TailwindCSS優先
- **!important禁止**: 特異性で解決
- **マジックナンバー禁止**: Design Token使用

### UIコンポーネント
- **shadcn使用**: UIパーツはshadcn優先
- **独自開発禁止**: 存在するUIパーツの再実装禁止

## パフォーマンス基準

- 計測項目に関して以下の環境での定量目標の達成を目標とする。タスクの最終Phaseが完了した時点で各目標が達成しているか必ず確認すること。

### パフォーマンス監視環境
- **react-scan**: 開発時の不要レンダリング自動検出（軽量設定推奨）
- **bundle-analyzer**: バンドルサイズの監視

### パフォーマンス目標
| 項目 | 目標 | 測定方法 |
|------|------|----------|
| 初期レンダリング | < 100ms | react-scan |
| 再レンダリング | < 16ms | react-scan |
| 不要レンダリング | 0件 | react-scan (trackUnnecessaryRenders) |
| バンドルサイズ | < 250KB | Bundle Analyzer |
| CSSバンドルサイズ | < 50KB (gzipped) | Bundle Analyzer |
