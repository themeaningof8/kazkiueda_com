---
description: 
globs: 
alwaysApply: false
---
# 🚨 緊急時対応・代替戦略

どうしても正規の手続きで作業が前に進まなくなったときの手順を記す。
なお、あくまで代替戦略を取ってもタスク未完了であれば、**タスクを完了したことにはならない**

## 緊急時対応

### エラー解決優先順位
1. **ビルドエラー**: 最優先で解決
2. **TypeScript型エラー**: strict準拠で解決
3. **ESLintエラー**: ルール準拠で解決
4. **テスト失敗**: TDDサイクルで解決（環境問題時は代替戦略）

### 3回ルール
- 同一ファイルでのlinterエラー修正は最大3回
- 3回目で解決しない場合は`deepwiki`で相談
- テスト環境問題も3回ルール適用後、代替戦略実行

## 技術的制約対応

### 代替戦略例
- **テスト環境構築失敗**: 手動テスト + 後日解決
- **deepwiki mcp利用不可**: package.json手動確認
- **ツール設定競合**: 最小限設定で動作優先
- **パフォーマンス測定困難**: 開発環境での目視確認

### エラー発生時の対応フロー

```mermaid
graph TD
    A[エラー発生] --> B{エラータイプ判定}
    B -->|ビルドエラー| C[最優先で解決]
    B -->|型エラー| D[strict準拠で解決]
    B -->|ESLintエラー| E[ルール準拠で解決]
    B -->|テスト失敗| F[TDDサイクルで解決]

    C --> G{解決回数チェック}
    D --> G
    E --> G
    F --> G

    G -->|3回未満| H[再試行]
    G -->|3回目| I[代替戦略実行]

    H --> J[問題解決]
    I --> K[ユーザー相談]
```

## 緊急時の判断基準

### 即座対応が必要な状況
- **プロダクションビルド失敗**
- **型チェック完全停止**
- **デプロイメントブロッカー**
- **セキュリティ関連エラー**

### 段階的対応可能な状況
- **テストカバレッジ不足**
- **パフォーマンス最適化**
- **UI/UX改善**
- **コードリファクタリング**

## 回復手順

### ロールバック基準
1. **ビルド失敗が30分以上継続**
2. **テスト環境が完全に破綻**
3. **開発環境が起動不可**
4. **Git履歴の重大な破損**

### 段階的復旧
1. **最小限機能復旧**: 基本動作確認
2. **ビルド成功確認**: エラー0件達成
3. **テスト環境復旧**: 基本テスト実行可能
4. **完全機能復旧**: 全機能正常動作

## エスカレーション基準

### ユーザー相談が必要な状況
- **3回ルール到達**
- **技術的判断が必要**
- **仕様変更の可能性**
- **外部依存関係の問題**

### 自律的解決可能な範囲
- **設定ファイルの調整**
- **import/export修正**
- **型定義の追加**
- **基本的なバグ修正**