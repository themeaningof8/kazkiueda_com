---
description: 
globs: 
alwaysApply: false
---
# UX法則ガイド（Laws of UX）

このガイドはユーザーインターフェースを構築する際に考慮すべきUXの法則をまとめています。これらの法則は心理学に基づいており、より直感的で人間中心的なデザインの実現に役立ちます。

## 主要なUX法則

### 1. 美的使いやすさ効果（Aesthetic-Usability Effect）
- **法則**: ユーザーは美しいデザインをより使いやすいと認識する
- **実装時の考慮点**:
  - UIコンポーネントの視覚的な魅力を重視
  - 一貫性のあるデザインシステムの採用
  - 適切なタイポグラフィとカラーパレットの使用

### 2. 選択肢過多（Choice Overload）
- **法則**: 選択肢が多すぎると、ユーザーは決定を困難に感じる
- **実装時の考慮点**:
  - ナビゲーションメニューの項目数を制限（7±2の法則）
  - 段階的な選択肢の提示
  - デフォルト選択肢の提供
  - フィルタリング機能の実装

### 3. チャンキング（Chunking）
- **法則**: 情報を小さなグループに分けることで記憶しやすくなる
- **実装時の考慮点**:
  - フォームフィールドのグループ化
  - コンテンツの論理的な区分け
  - 電話番号やクレジットカード番号の適切な区切り表示

### 4. 認知バイアス（Cognitive Bias）
- **法則**: 人は系統的な思考の誤りや認知の歪みを持つ
- **実装時の考慮点**:
  - 確証バイアスを考慮した情報設計
  - アンカリング効果を活用した価格表示
  - 損失回避傾向を考慮したメッセージング
  - 社会的証明の活用（レビュー、評価等）

### 5. 認知負荷（Cognitive Load）
- **法則**: インターフェースを理解し操作するために必要な精神的なリソースの量
- **実装時の考慮点**:
  - すぐに理解できない情報の削減
  - 段階的な情報開示
  - 視覚的なノイズの最小化
  - 認知的負担を軽減するデフォルト設定

### 6. ドハティ閾値（Doherty Threshold）
- **法則**: 400ms以下の応答時間で、ユーザーとコンピューターが互いを待たずに済む
- **実装時の考慮点**:
  - ページ読み込み時間の最適化
  - インタラクションのレスポンス時間向上
  - ローディング状態の適切な表示
  - 非同期処理の活用

### 7. フロー（Flow）
- **法則**: 完全に集中した状態での没入感のある体験
- **実装時の考慮点**:
  - 中断の最小化
  - 明確な目標と即座のフィードバック
  - 適切な難易度レベルの設定
  - 気を散らす要素の排除

### 8. ゴール勾配効果（Goal-Gradient Effect）
- **法則**: 目標に近づくほど、その目標に向かう傾向が強くなる
- **実装時の考慮点**:
  - プログレスバーの表示
  - マイルストーンの可視化
  - 完了までの残り工程の明示
  - 段階的な達成感の提供

### 9. ヒックの法則（Hick's Law）
- **法則**: 選択肢の数が増えるほど、決定に要する時間が増加する
- **実装時の考慮点**:
  - メニュー項目の数を制限（推奨：5-9個）
  - 階層化されたナビゲーション構造
  - よく使われる項目の優先的な配置
  - 検索機能の提供（選択肢が多い場合）

### 10. ヤコブの法則（Jakob's Law）
- **法則**: ユーザーは他のサイトで過ごす時間が長いため、既存の慣習に従うことを期待する
- **実装時の考慮点**:
  - 一般的なUIパターンの採用
  - 業界標準のアイコンや配置の使用
  - ユーザーの既存の理解を活用
  - 革新的な要素は慎重に導入

### 11. 共通領域の法則（Law of Common Region）
- **法則**: 明確に定義された境界を共有するエリア内の要素は、グループとして認識される
- **実装時の考慮点**:
  - カードやボックスでのコンテンツのグループ化
  - 背景色や境界線による領域の明確化
  - 関連する機能の視覚的なまとまり
  - セクション分けによる情報の整理

### 12. プレグナンツの法則（Law of Prägnanz）
- **法則**: 人は曖昧で複雑な画像を、最も簡単で認知負荷の少ない形で解釈する
- **実装時の考慮点**:
  - シンプルで明確なアイコンデザイン
  - 複雑な情報の単純化
  - 認識しやすい形状とパターンの使用
  - 最小限の要素での表現

### 13. 近接の法則（Law of Proximity）
- **法則**: 近くにある要素は関連していると認識される
- **実装時の考慮点**:
  - 関連する要素のグループ化
  - 適切な余白の使用
  - 視覚的な階層の明確化
  - フォームフィールドの論理的な配置

### 14. 類似性の法則（Law of Similarity）
- **法則**: 視覚的に類似した要素は、完全な形状やグループとして認識される
- **実装時の考慮点**:
  - 同じ機能の要素に統一したスタイル適用
  - カラーパレットの一貫性
  - タイポグラフィの統一
  - アイコンスタイルの統一

### 15. 統一連結の法則（Law of Uniform Connectedness）
- **法則**: 視覚的に接続された要素は、関連性がより高いと認識される
- **実装時の考慮点**:
  - 線や矢印による関係性の表示
  - フローチャートやステップガイドでの活用
  - ナビゲーションでの現在位置表示
  - プロセスの可視化

### 16. メンタルモデル（Mental Model）
- **法則**: ユーザーがシステムの動作について持つ理解や期待に基づく圧縮モデル
- **実装時の考慮点**:
  - ユーザーの既存の理解に合わせた設計
  - 現実世界のメタファーの活用
  - 予測可能な機能配置
  - 一貫性のある操作体系

### 17. ミラーの法則（Miller's Law）
- **法則**: 人は一度に7±2個の項目しか記憶できない
- **実装時の考慮点**:
  - リスト項目の数を7個以下に制限
  - ページネーションの実装
  - カテゴリ化による情報の整理
  - 重要な情報の優先的な表示

### 18. オッカムの剃刀（Occam's Razor）
- **法則**: 最もシンプルな解決策が通常最良である
- **実装時の考慮点**:
  - 不要な機能や装飾の削除
  - 直感的なナビゲーション設計
  - ミニマルなインターフェース設計

### 19. アクティブユーザーのパラドックス（Paradox of the Active User）
- **法則**: ユーザーはマニュアルを読まずに、すぐにソフトウェアを使い始める
- **実装時の考慮点**:
  - 直感的なインターフェースの設計
  - コンテキストヘルプの提供
  - プログレッシブオンボーディング
  - 実際の使用パターンに基づく設計

### 20. パレートの法則（Pareto Principle）
- **法則**: 大抵の事象において、結果の80%は原因の20%から生まれる
- **実装時の考慮点**:
  - 最も重要な20%の機能の優先化
  - よく使われる機能の際立たせ
  - リソース配分の最適化
  - コアユーザー体験への集中

### 21. パーキンソンの法則（Parkinson's Law）
- **法則**: 作業は利用可能な時間いっぱいまで拡張される
- **実装時の考慮点**:
  - 明確な期限の設定
  - タスクの分割と時間制限
  - 進捗の可視化
  - 効率的なワークフローの設計

### 22. ピークエンド法則（Peak-End Rule）
- **法則**: 人は体験のピーク時と終了時を最も強く記憶する
- **実装時の考慮点**:
  - 成功メッセージの効果的な演出
  - オンボーディング体験の最適化
  - エラー処理時のポジティブな体験設計

### 23. ポステルの法則（Postel's Law）
- **法則**: 受け入れるものは寛大に、送信するものは保守的に
- **実装時の考慮点**:
  - 多様な入力フォーマットの受け入れ
  - エラー耐性の高い設計
  - ユーザーの間違いに対する寛容さ
  - 明確で一貫したアウトプット

### 24. 選択的注意（Selective Attention）
- **法則**: 人は環境の刺激の一部分のみに注意を向ける
- **実装時の考慮点**:
  - 重要な要素の強調表示
  - 不要な視覚的ノイズの削減
  - 注意を引くべき要素の戦略的配置
  - フォーカス状態の明確化

### 25. 系列位置効果（Serial Position Effect）
- **法則**: リストの最初と最後の項目が最もよく記憶される
- **実装時の考慮点**:
  - 重要な項目をリストの最初または最後に配置
  - メニュー項目の戦略的順序付け
  - プライマリ効果とリーセンシー効果の活用
  - ナビゲーションの構造化

### 26. テスラーの法則（Tesler's Law / Law of Conservation of Complexity）
- **法則**: システムには削減できない一定の複雑さが存在する
- **実装時の考慮点**:
  - 複雑さをユーザーから開発者側に移行する設計
  - プログレッシブディスクロージャー（段階的な情報開示）
  - 高度な機能の適切な隠蔽と公開

### 27. フィッツの法則（Fitts's Law）
- **法則**: ターゲットの取得時間は、ターゲットまでの距離とサイズに関連する
- **実装時の考慮点**:
  - 重要なボタンのサイズを十分に大きくする
  - 関連する要素を近くに配置
  - タッチターゲットの適切なサイズ設定（最小44px × 44px）
  - マウスの移動距離を最小化å

### エラーハンドリング
- **ピークエンド法則**: エラー後の解決体験を重視
- **ポステルの法則**: 多様な入力を寛大に受け入れる
- **認知バイアス**: 建設的で分かりやすいメッセージ
- **アクティブユーザーのパラドックス**: 即座に理解できるエラー表示

## 各法則の適用場面

### 情報アーキテクチャ
- **ミラーの法則**: メニュー項目数の制限
- **近接の法則**: 関連コンテンツのグループ化
- **チャンキング**: 情報の構造化
- **系列位置効果**: 重要項目の配置戦略
- **メンタルモデル**: ユーザーの期待に沿った構造

### インタラクションデザイン
- **フィッツの法則**: ボタンサイズとレイアウト
- **ヒックの法則**: 選択肢の数の最適化
- **ヤコブの法則**: 既存パターンの活用
- **ドハティ閾値**: レスポンス時間の最適化
- **フロー**: 没入感のある体験設計

### 視覚デザイン
- **美的使いやすさ効果**: 見た目の魅力
- **近接の法則**: 要素の配置
- **類似性の法則**: 一貫したスタイル
- **プレグナンツの法則**: シンプルで明確なデザイン
- **選択的注意**: 重要要素の強調

### ユーザー体験設計
- **ピークエンド法則**: 体験のクライマックス設計
- **ゴール勾配効果**: 進捗とモチベーション
- **認知負荷**: 情報量の最適化
- **パレートの法則**: 重要機能への集中
