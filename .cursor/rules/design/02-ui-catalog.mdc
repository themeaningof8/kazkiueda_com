---
description: 
globs: 
alwaysApply: false
---
# 📚 UIコンポーネントカタログ・Storybook実装ルール

## 基本方針
**[design-core.mdc](mdc:.cursor/rules/design/design-core.mdc) の認知科学的根拠に基づく設計原則を適用し、再利用可能で一貫性のあるUIコンポーネントカタログを構築する。**

shadcn/uiコンポーネントをベースとしつつ、プロジェクト独自のビジネスコンポーネントの品質を担保する。

---

## 1. Storybook設定方針

### 必須技術スタック
- **Storybook 8.0以上** 必須
- **TypeScript strict mode** 準拠
- **shadcn/ui** ベースコンポーネント活用
- **TailwindCSS** スタイリング
- **Vite integration** 高速ビルド

### 設定ファイル構成
```
.storybook/
├── main.ts          ← Vite設定・addon管理
├── preview.ts       ← グローバル設定・デコレーター
└── manager.ts       ← UI設定
```

### 必須addon構成
```typescript
// .storybook/main.ts
export default {
  addons: [
    '@storybook/addon-essentials',      // 基本機能
    '@storybook/addon-a11y',            // アクセシビリティ
    '@storybook/addon-viewport',        // レスポンシブ確認
    '@storybook/addon-interactions',    // インタラクションテスト
  ]
}
```


## 2. Story作成ルール

### ファイル命名規則
```
ComponentName.stories.tsx
例：Button.stories.tsx, UserProfile.stories.tsx
```

### Story構造テンプレート
```typescript
import type { Meta, StoryObj } from '@storybook/react';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  title: 'Components/UI/Button',  // 階層化命名
  component: Button,
  parameters: {
    layout: 'centered',          // レイアウト設定
    docs: {
      description: {
        component: 'ボタンコンポーネントの説明'
      }
    }
  },
  argTypes: {
    variant: {
      control: 'select',
      options: ['default', 'primary', 'secondary', 'destructive']
    },
    size: {
      control: 'select',
      options: ['sm', 'md', 'lg']
    }
  },
  tags: ['autodocs']             // 自動ドキュメント生成
};

export default meta;
type Story = StoryObj<typeof meta>;

// 基本Story
export const Default: Story = {
  args: {
    children: 'ボタン',
    variant: 'default'
  }
};

// バリエーションStory
export const Primary: Story = {
  args: {
    children: 'プライマリボタン',
    variant: 'primary'
  }
};

// インタラクションStory
export const WithInteraction: Story = {
  args: {
    children: 'クリック',
    variant: 'primary'
  },
  play: async ({ canvasElement }) => {
    // インタラクションテストロジック
  }
};
```

### 必須Story構成
各コンポーネントで以下のStoryを作成：
- **Default**: デフォルト状態
- **AllVariants**: 全バリエーション表示
- **Interactive**: インタラクション確認
- **Accessibility**: アクセシビリティ確認

---

## 3. コンポーネント分類・階層化

コンポーネント設計は以下のようになる。
また、コロケーション戦略に基づき関連ファイルはすべて同一階層にまとめて格納する。

### ディレクトリ対応Story分類
```
src
├── components/
│   ├── ui/                 ← shadcn/uiでインストールされるコンポーネント
│   │   ├── Button
│   │   ├── Input
│   │   └── Card
│   ├── Business/           ← ビジネスコンポーネント
│   │   ├── UserProfile
│   │   └── ProductCard
│   └── Layout/             ← レイアウトテンプレート
│       ├── Header
│       └── Sidebar
└── Features/               ← 機能単位コンポーネント
    ├── Auth/
    └── Todo/
```

### コンポーネント昇格ルール
- **新規作成**: Features内からスタート
- **3回ルール**: 3箇所で使用されたらBusiness/に移動
- **shadcn拡張**: shadcn/uiベースの拡張は `components/ui` に配置

## 4. デザインシステム統合

### デザイントークンStory
```typescript
// Colors.stories.tsx
export const ColorPalette: Story = {
  render: () => (
    <div className="space-y-4">
      <div className="grid grid-cols-6 gap-4">
        <div className="bg-primary h-16 rounded-lg" />
        <div className="bg-secondary h-16 rounded-lg" />
        {/* 全カラートークン表示 */}
      </div>
    </div>
  )
};

// Typography.stories.tsx
export const TypographyScale: Story = {
  render: () => (
    <div className="space-y-4">
      <h1 className="text-4xl font-bold">見出し1</h1>
      <h2 className="text-3xl font-semibold">見出し2</h2>
      {/* 全文字サイズ表示 */}
    </div>
  )
};

// Spacing.stories.tsx
export const SpacingScale: Story = {
  render: () => (
    <div className="space-y-8">
      <div className="bg-gray-200 h-2 w-8" />   {/* 8px */}
      <div className="bg-gray-200 h-4 w-16" />  {/* 16px */}
      <div className="bg-gray-200 h-6 w-24" />  {/* 24px */}
      {/* 8の倍数スペーシング表示 */}
    </div>
  )
};
```

---

## 5. 品質保証・テスト統合

### 必須チェック項目Story
```typescript
// Accessibility.stories.tsx
export const AccessibilityTest: Story = {
  parameters: {
    a11y: {
      config: {
        rules: [
          { id: 'color-contrast', enabled: true },
          { id: 'keyboard-navigation', enabled: true }
        ]
      }
    }
  }
};

// ResponsiveTest.stories.tsx
export const ResponsiveTest: Story = {
  parameters: {
    viewport: {
      viewports: {
        mobile: { name: 'Mobile', styles: { width: '375px', height: '667px' }},
        tablet: { name: 'Tablet', styles: { width: '768px', height: '1024px' }},
        desktop: { name: 'Desktop', styles: { width: '1200px', height: '800px' }}
      }
    }
  }
};
```

### インタラクションテスト
```typescript
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const InteractionTest: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = canvas.getByRole('button');

    // クリックテスト
    await userEvent.click(button);

    // 期待する結果確認
    await expect(button).toHaveClass('active');
  }
};
```

---

## 6. パフォーマンス最適化

### Storybook設定最適化
```typescript
// .storybook/main.ts
export default {
  core: {
    disableTelemetry: true,
  },
  features: {
    buildStoriesJson: true,    // ストーリーメタデータキャッシュ
  },
  viteFinal: (config) => {
    // Vite最適化設定
    return {
      ...config,
      build: {
        rollupOptions: {
          output: {
            manualChunks: {
              vendor: ['react', 'react-dom'],
              storybook: ['@storybook/react']
            }
          }
        }
      }
    };
  }
};
```

### レンダリング最適化
```typescript
// 重いコンポーネントの遅延読み込み
export const LazyComponent: Story = {
  render: () => {
    const [Component, setComponent] = useState(null);

    useEffect(() => {
      import('./HeavyComponent').then(module => {
        setComponent(() => module.HeavyComponent);
      });
    }, []);

    return Component ? <Component /> : <div>Loading...</div>;
  }
};
```

---

## 7. ドキュメント自動生成

### MDX形式ドキュメント
```mdx
<!-- Button.mdx -->
import { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';
import { Button } from './Button';

<Meta title="Components/UI/Button" component={Button} />

# Button

基本的なボタンコンポーネント

## 使用方法
```tsx
<Button variant="primary" size="md">
  クリック
</Button>
```

## Props
<ArgsTable of={Button} />

## Examples
<Canvas>
  <Story name="Default" />
</Canvas>
```

### 自動生成設定
```typescript
// .storybook/preview.ts
export const parameters = {
  docs: {
    autodocs: 'tag',
    defaultName: 'Documentation'
  }
};
```

---

## 8. 継続的品質管理

### Storybookビルドチェック
```json
// package.json
{
  "scripts": {
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "test-storybook": "test-storybook",
    "chromatic": "chromatic --exit-zero-on-changes"
  }
}
```

### CI/CD統合
- **ビルド成功**: 必須条件
- **Visual Regression Test**: Chromatic活用
- **Accessibility Test**: 自動実行
- **Performance Test**: 定期計測

---

## 9. 実装優先度

### P0（必須実装）
- [ ] 基本Storybook設定完了
- [ ] shadcn/uiコンポーネントStory作成
- [ ] デザイントークンStory作成
- [ ] ビルド・デプロイ成功

### P1（強く推奨）
- [ ] ビジネスコンポーネントStory作成
- [ ] インタラクションテスト実装
- [ ] アクセシビリティテスト実装
- [ ] レスポンシブテスト実装

### P2（理想的）
- [ ] Visual Regression Test導入
- [ ] パフォーマンス測定自動化
- [ ] 完全なドキュメント自動生成
- [ ] デザインハンドオフ機能

---

## 10. 品質チェックリスト

### Story作成時
- [ ] 適切な階層でStoryを配置
- [ ] 全バリエーションをカバー
- [ ] インタラクションテスト実装
- [ ] アクセシビリティ確認
- [ ] レスポンシブ確認
- [ ] デザイントークン準拠確認

### コンポーネント更新時
- [ ] 関連Storyの同期更新
- [ ] 破壊的変更の確認
- [ ] Visual Regression Test実行
- [ ] ドキュメント更新

### 定期メンテナンス
- [ ] 未使用Storyの整理
- [ ] コンポーネント昇格検討
- [ ] パフォーマンス改善
- [ ] 新機能addon導入検討

---

**このルールに従って、 [01-design-core.mdc](mdc:design/01-design-core.mdc) の認知科学的根拠に基づく一貫性のあるUIコンポーネントカタログを構築し、開発効率と品質を向上させよ。**