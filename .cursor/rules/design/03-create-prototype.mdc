---
description: 
globs: 
alwaysApply: false
---
# プロトタイプ作成実行ルール

## 基本方針
**認識合わせ専用のデザインカンプ作成に特化し、過度な実装を避けて必要最小限の範囲で制作する。**
[01-design-core.mdc](mdc:design/01-design-core.mdc) の認知科学的根拠に基づく設計原則を適用しつつ、プロトタイプの目的を明確に限定する。

---

## 1. プロトタイプの目的と制約

### 制作目的
- **他職能との認識合わせ**（PO・デザイナー・PM等との仕様確認）
- **レイアウト・情報設計の可視化**
- **インタラクション仕様の簡易確認**

### 実装制約
- **shadcn/ui + マークアップ + スタイリング以上のことはしない**
- **ビジネスロジック実装は一切行わない**
- **API連携・状態管理・データ永続化は実装しない**
- **必要最小限のモック表示のみ**

---

## 2. 実装範囲の厳密な定義

### 実装すること
- **shadcn/uiコンポーネントの配置**
- **[01-design-core.mdc](mdc:design/01-design-core.mdc) 準拠のレイアウト設計**
  - 8の倍数スペーシング
  - 5個以内の同時表示要素
  - 適切な視線誘導パターン（Z型/F型/グーテンベルク図）
- **静的なマークアップ**
- **Tailwind CSSによるスタイリング**
- **基本的なhover/focus状態のスタイリング**

### 実装しないこと
- **useState、useEffect等のReactフック**
- **API呼び出し・データフェッチ**
- **フォーム送信処理**
- **認証・認可ロジック**
- **複雑なアニメーション**
- **パフォーマンス最適化**
- **エラーハンドリング**
- **国際化対応**

---

## 3. プロトタイプ実装フロー

### Step 1: 要件整理
1. **画面の主要な目的を1つに絞る**
2. **必要な情報要素を5個以内にリスト化する**
3. **主要なユーザーアクション（ボタン・リンク）を特定する**

### Step 2: 情報設計
1. ** [01-design-core.mdc](mdc:design/01-design-core.mdc) の視線誘導パターンを選択する**
   - シンプルなコンテンツ → Z型パターン
   - テキスト重要 → F型パターン
   - 均等情報 → グーテンベルク図
2. **情報の優先度を設定する**（高・中・低の3段階）
3. **認知負荷チェック**（同時表示要素5個以内）

### Step 3: コンポーネント選択
1. **shadcn/uiから適切なコンポーネントを選択する**
2. **カスタムコンポーネントは最小限に抑える**
3. **複合コンポーネントより単純なコンポーネントを優先する**

### Step 4: 実装
1. **静的データでのマークアップ作成**
2. **8の倍数スペーシングでレイアウト構築**
3. **デザイントークン @index.css に準拠したスタイリング**
4. **基本的なインタラクション状態の実装**

### Step 5: 品質確認
必須チェック項目：
- [ ] 同時表示要素が5個以内
- [ ] 重要ボタンが44px以上
- [ ] 8の倍数スペーシング使用
- [ ] 選択した視線誘導パターンに準拠
- [ ] 静的データのみ使用
- [ ] ビジネスロジックが含まれていない

---

## 4. モックデータ作成ガイドライン

### データ設計原則
- **現実的だが簡素なサンプルデータを使用する**
- **日本語コンテンツを優先する**
- **文字数・項目数は実際の運用を想定した範囲内に設定する**

### 具体的なモック例
```typescript
// ❌ 複雑すぎる
const mockUser = {
  id: 1,
  profile: { ... },
  preferences: { ... },
  activityLog: [ ... ]
}

// ✅ 必要最小限
const mockUser = {
  name: "田中太郎",
  email: "tanaka@example.com"
}
```

---

## 5. 他職能との認識合わせポイント

### 確認すべき要素
1. **レイアウト・情報配置**
   - 重要な情報が適切な位置にあるか
   - 視線の流れが意図通りか
2. **コンテンツ・文言**
   - 表示するテキストの内容・長さ
   - ボタンやリンクのラベル
3. **インタラクション仕様**
   - どのボタンがどのような動作をするか
   - フォームの入力項目と必須/任意の区別
4. **状態変化**
   - ローディング状態
   - エラー状態
   - 成功状態

### 明確にしないこと
- **詳細なビジネスロジック**
- **API仕様の詳細**
- **パフォーマンス要件**
- **セキュリティ要件**

---

## 6. ファイル・コンポーネント命名規則

### ファイル名
```
Proto{機能名}.tsx
例：ProtoUserProfile.tsx, ProtoProductList.tsx
```

### コンポーネント名
```
Proto{機能名}
例：ProtoUserProfile, ProtoProductList
```

### 配置場所
```
src/
├── components/
│   └── proto/          ← プロトタイプ専用ディレクトリ
│       ├── ProtoUserProfile.tsx
│       └── ProtoProductList.tsx
```

---

## 7. 実装時の注意事項

### 厳守すべき制約
- **`useState`, `useEffect`等のReactフックは使用禁止**
- **外部API呼び出しは一切行わない**
- **複雑なビジネスロジックは実装しない**
- **プロダクションコードと混在させない**

### 推奨される実装パターン
```tsx
// ✅ 推奨パターン
function ProtoUserProfile() {
  const mockUser = {
    name: "田中太郎",
    email: "tanaka@example.com"
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>{mockUser.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground">
          {mockUser.email}
        </p>
      </CardContent>
    </Card>
  )
}
```

```tsx
// ❌ 避けるべきパターン
function ProtoUserProfile() {
  const [user, setUser] = useState(null) // useState使用禁止

  useEffect(() => {
    // API呼び出し禁止
    fetchUser().then(setUser)
  }, [])

  const handleSubmit = async (data) => {
    // ビジネスロジック実装禁止
    await api.updateUser(data)
  }

  return (/* ... */)
}
```

---

## 8. Storybookでの確認・共有

### Storybook活用の目的
- **他職能との視覚的な認識合わせの効率化**
- **プロトタイプの状態バリエーション表示**
- **デザインレビュー・フィードバック収集の円滑化**
- **ブラウザ環境での実際の表示確認**

### Story作成ガイドライン

#### Story命名規則
```typescript
// ファイル名: Proto{機能名}.stories.tsx
// 配置: src/components/proto/Proto{機能名}.stories.tsx

export default {
  title: 'Prototypes/{機能名}',
  component: Proto{機能名},
  parameters: {
    docs: {
      description: {
        component: 'プロトタイプ: {機能の説明}'
      }
    }
  }
} as Meta<typeof Proto{機能名}>
```

#### 基本Story構成
```typescript
// デフォルトストーリー
export const Default: Story = {
  name: 'デフォルト',
  args: {}
}

// 状態バリエーション（必要に応じて）
export const Loading: Story = {
  name: 'ローディング状態',
  args: {
    isLoading: true
  }
}

export const Error: Story = {
  name: 'エラー状態',
  args: {
    hasError: true
  }
}
```

### Controls設定
プロトタイプの認識合わせに有効なControls設定：

```typescript
argTypes: {
  // テキスト長さの確認
  title: {
    control: 'text',
    description: 'タイトルの表示確認用'
  },
  // データ量の確認
  itemCount: {
    control: { type: 'range', min: 0, max: 10 },
    description: 'アイテム数による表示の変化確認'
  },
  // 状態の確認
  status: {
    control: 'select',
    options: ['default', 'loading', 'error', 'success'],
    description: '各種状態の表示確認'
  }
}
```

### アクセシビリティ検証の統合
```typescript
// .storybook/main.ts に追加
export default {
  addons: [
    '@storybook/addon-a11y'  // アクセシビリティ検証
  ]
}
```

### 認識合わせ用ドキュメント
各Storyにはプロトタイプの意図と制約を明記：

```typescript
parameters: {
  docs: {
    description: {
      story: `
        ### 確認ポイント
        - レイアウトの視線誘導パターン（Z型/F型/グーテンベルク図）
        - 情報要素の優先度表現
        - インタラクション要素の配置と大きさ

        ### 制約事項
        - 静的データのみ使用
        - ビジネスロジック未実装
        - API連携なし
      `
    }
  }
}
```

### プロトタイプ専用のStorybook設定

#### Viewport設定
```typescript
// .storybook/preview.ts
export const parameters = {
  viewport: {
    viewports: {
      mobile: { name: 'Mobile', styles: { width: '375px', height: '667px' } },
      tablet: { name: 'Tablet', styles: { width: '768px', height: '1024px' } },
      desktop: { name: 'Desktop', styles: { width: '1200px', height: '800px' } }
    }
  }
}
```

#### テーマ切り替え
```typescript
// ダークモード・ライトモードの確認
import { themes } from '@storybook/theming';

export const parameters = {
  darkMode: {
    current: 'light',
    dark: { ...themes.dark },
    light: { ...themes.light }
  }
}
```

### プロトタイプStory実装例
```typescript
import type { Meta, StoryObj } from '@storybook/react'
import { ProtoUserProfile } from './ProtoUserProfile'

const meta: Meta<typeof ProtoUserProfile> = {
  title: 'Prototypes/UserProfile',
  component: ProtoUserProfile,
  parameters: {
    docs: {
      description: {
        component: 'ユーザープロフィール表示のプロトタイプ'
      }
    }
  },
  argTypes: {
    userName: {
      control: 'text',
      description: 'ユーザー名の表示確認（文字数による影響確認）'
    },
    userEmail: {
      control: 'text',
      description: 'メールアドレスの表示確認'
    },
    showAvatar: {
      control: 'boolean',
      description: 'アバター表示の有無'
    }
  }
}

export default meta
type Story = StoryObj<typeof meta>

export const Default: Story = {
  name: 'デフォルト表示',
  args: {
    userName: '田中太郎',
    userEmail: 'tanaka@example.com',
    showAvatar: true
  }
}

export const LongName: Story = {
  name: '長い名前での表示確認',
  args: {
    userName: '田中太郎田中太郎田中太郎田中太郎',
    userEmail: 'very.long.email.address@example.com',
    showAvatar: true
  }
}

export const NoAvatar: Story = {
  name: 'アバターなし',
  args: {
    userName: '田中太郎',
    userEmail: 'tanaka@example.com',
    showAvatar: false
  }
}
```

### 品質確認チェックリスト（Storybook）
- [ ] プロトタイプ用のStoryが作成されている
- [ ] デフォルト・状態バリエーションのStoryが存在する
- [ ] Controls設定で認識合わせポイントが確認できる
- [ ] アクセシビリティ検証が組み込まれている
- [ ] 各Storyにプロトタイプの制約が明記されている
- [ ] レスポンシブ表示の確認ができる
- [ ] ダークモード・ライトモードの確認ができる

---

## 9. 品質保証チェックリスト

### 設計品質
- [ ] [design-core.mdc](mdc:.cursor/rules/design/design-core.mdc)の必須ルールに準拠している
- [ ] 同時表示要素が5個以内に収まっている
- [ ] 8の倍数スペーシングを使用している
- [ ] 適切な視線誘導パターンを適用している

### 実装品質
- [ ] shadcn/uiコンポーネントを適切に使用している
- [ ] 静的データのみを使用している
- [ ] Reactフックを使用していない
- [ ] API呼び出しを行っていない
- [ ] ビジネスロジックを含んでいない

### 認識合わせ品質
- [ ] 他職能が理解しやすい明確な画面構成になっている
- [ ] 主要な機能・情報が適切に表現されている
- [ ] 現実的なサンプルデータを使用している
- [ ] インタラクション仕様が明確に示されている

---

**このルールに基づき、必要最小限かつ認知科学的根拠に基づいたプロトタイプを作成し、他職能との効果的な認識合わせを実現せよ。**