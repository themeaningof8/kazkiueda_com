---
description: 
globs: *.ts,*.tsx,*.js,*.jsx,*.astro
alwaysApply: false
---
# 🔍 品質管理・ツール設定

## ESLint設定方針

### 基本設定
- **TypeScript 5.0以上 + strict mode** 必須
- **Flat Config形式** (eslint.config.ts) 使用
- **プロジェクト必須**: リンター指摘0件で作業完了

### 必須ルールセット
```typescript
// eslint.config.ts 基本構造
export default [
  {
    ignores: ['dist', 'build', 'node_modules']
  },
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    plugins: {
      react: pluginReact,
      '@typescript-eslint': pluginTs,
      'react-hooks': pluginReactHooks
    },
    languageOptions: {
      parser: parserTs,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: { jsx: true },
        project: './tsconfig.json'
      }
    },
    rules: {
      // 重要ルールのみ記載
    }
  }
];
```

### 重要ルール（エラーレベル）
```javascript
rules: {
  // React Hooks厳格運用
  'react-hooks/exhaustive-deps': 'error',
  'react-hooks/rules-of-hooks': 'error',

  // 変数管理
  '@typescript-eslint/no-unused-vars': ['error', {
    argsIgnorePattern: '^_',
    varsIgnorePattern: '^_'
  }],
  'no-var': 'error',
  'prefer-const': 'error',

  // 型安全性
  'eqeqeq': 'error',
  '@typescript-eslint/prefer-optional-chain': 'error',
  '@typescript-eslint/prefer-nullish-coalescing': 'error',
  '@typescript-eslint/no-unnecessary-type-assertion': 'error',

  // React セキュリティ
  'react/jsx-key': 'error',
  'react/jsx-no-target-blank': 'error',
  'react/no-find-dom-node': 'error',

  // TypeScript品質
  '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
  '@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports' }],
  '@typescript-eslint/only-throw-error': 'error'
}
```

### 警告レベル
```javascript
// デバッグ・パフォーマンス
'no-console': 'warn',
'react/no-danger': 'warn',
'react/display-name': 'warn',
'class-methods-use-this': 'warn',
'@typescript-eslint/prefer-readonly': 'warn'
```

### 無効化ルール
```javascript
// React 17+ & TypeScript環境
'react/react-in-jsx-scope': 'off',
'react/prop-types': 'off'
```

### 環境別上書き
```javascript
// テストファイル
{
  files: ['**/__tests__/**/*', '**/*.test.*', '**/*.spec.*'],
  rules: {
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off'
  }
},
// 設定ファイル
{
  files: ['**/*.config.*', '**/.*rc.*'],
  rules: {
    '@typescript-eslint/no-var-requires': 'off',
    'no-console': 'off'
  }
}
```

## テスト環境設定

### 基本構成
- **フレームワーク**: Vitest + React Testing Library
- **カバレッジ目標**: > 80%
- **テストファイル**: `*.test.{ts,tsx}` または `__tests__/`
- **詳細実装**: [05a-tdd-cycle.mdc](mdc:.cursor/rules/05a-tdd-cycle.mdc) 参照

### 必須設定ファイル
```typescript
// vitest.config.ts
export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.ts',
    coverage: {
      provider: 'v8',
      reporter: ['text', 'html'],
      threshold: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80
        }
      }
    }
  }
})

// src/test/setup.ts
import { vi, beforeAll, afterEach } from 'vitest'
import { cleanup } from '@testing-library/react'
import '@testing-library/jest-dom'

beforeAll(() => {
  // Browser API mocks
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation((query) => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: vi.fn(),
      removeListener: vi.fn(),
      addEventListener: vi.fn(),
      removeEventListener: vi.fn(),
      dispatchEvent: vi.fn(),
    })),
  })
})

afterEach(() => {
  cleanup()
  vi.clearAllMocks()
})
```

## 自動化・CI/CD設定

### pre-commit hooks
```json
// package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "tsc --noEmit",
      "vitest run --passWithNoTests"
    ]
  }
}
```

### GitHub Actions例
```yaml
name: Quality Check
on: [push, pull_request]
jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: pnpm install
      - run: pnpm lint
      - run: pnpm type-check
      - run: pnpm test:coverage
      - run: pnpm build
```

## 品質基準・測定方法

| 項目 | 目標 | 測定方法 | 自動化 |
|------|------|----------|--------|
| ESLintエラー | 0件 | `pnpm lint` | ✅ pre-commit |
| TypeScript型エラー | 0件 | `tsc --noEmit` | ✅ pre-commit |
| ビルドエラー | 0件 | `pnpm build` | ✅ CI/CD |
| テストカバレッジ | > 80% | Vitest Coverage | ✅ CI/CD |
| 型チェック時間 | < 5秒 | tsc実行時間 | ⚠️ 手動監視 |
| 循環依存 | 0件 | madge --circular | ⚠️ 手動確認 |

## パフォーマンス監視

### Bundle Analyzer設定
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import { bundleAnalyzer } from 'rollup-plugin-bundle-analyzer'

export default defineConfig({
  plugins: [
    react(),
    process.env.ANALYZE && bundleAnalyzer({
      analyzerMode: 'static',
      openAnalyzer: false,
      reportFilename: 'dist/bundle-report.html'
    })
  ]
})
```

### react-scan設定（開発環境）
```typescript
// vite.config.ts
import reactScan from 'react-scan/vite'

export default defineConfig({
  plugins: [
    react(),
    process.env.NODE_ENV === 'development' && reactScan({
      trackUnnecessaryRenders: true,
      showToolbar: false // 軽量設定
    })
  ]
})
```

## 品質チェックリスト

### 開発時（毎回実行）
- [ ] `pnpm lint` エラー0件
- [ ] `pnpm type-check` エラー0件
- [ ] `pnpm test` 成功

### リリース時（必須実行）
- [ ] `pnpm build` 成功
- [ ] テストカバレッジ > 80%
- [ ] Bundle size < 250KB
- [ ] react-scan最適化確認

### 定期メンテナンス（月1回）
- [ ] 依存関係更新
- [ ] 循環依存チェック
- [ ] パフォーマンス改善レビュー
- [ ] ルール設定見直し