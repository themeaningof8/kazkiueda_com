---
description: 
globs: 
alwaysApply: false
---
# 📖 project rules 使用ガイド（完全版）

## 🎯 このガイドの目的
@/rules ディレクトリ内の全ルールファイルの役割・参照タイミング・活用例を網羅し、開発フェーズごとに最適な参照方法を示します。

---

## 📚 ルールファイル全体構成

### P0: 開発前・全体方針
- **[01-core.mdc](mdc:.cursor/rules/01-core.mdc)**: コア開発方針・環境設定・品質基準
- **[05-workflow.mdc](mdc:.cursor/rules/05-workflow.mdc)**: 全体開発フロー・優先度・参照ガイド

### P1: 設計・実装・テスト
- **[02-archtecture.mdc](mdc:.cursor/rules/02-archtecture.mdc)**: ディレクトリ構成・タスク分解・タスク分析テンプレート
- **[03-frontend.mdc](mdc:.cursor/rules/03-frontend.mdc)**: React/TypeScript実装・状態管理・パフォーマンス・アクセシビリティ
- **[04-quality.mdc](mdc:.cursor/rules/04-quality.mdc)**: ESLint/型/ビルド/CI/CD/パフォーマンス品質基準
- **[05a-tdd-cycle.mdc](mdc:.cursor/rules/05a-tdd-cycle.mdc)**: TDDサイクル詳細・Red-Green-Refactor手順・実践例
- **[05b-tdd-check.mdc](mdc:.cursor/rules/05b-tdd-check.mdc)**: 品質チェックリスト・段階的実装・生産性向上原則
- **[05c-tdd-emergency.mdc](mdc:.cursor/rules/05c-tdd-emergency.mdc)**: 緊急時対応・3回ルール・代替戦略
- **[06-testing.mdc](mdc:.cursor/rules/06-testing.mdc)**: テスト環境構築・mock・test-utils・自動化パターン

### P1: UI/デザイン・プロトタイプ
- **[design/01-design-core.mdc](mdc:.cursor/rules/design/01-design-core.mdc)**: 認知科学的UI設計ルール・スペーシング・視線誘導・一貫性
- **[design/02-ui-catalog.mdc](mdc:.cursor/rules/design/02-ui-catalog.mdc)**: UIコンポーネントカタログ・Storybook・昇格ルール
- **[design/03-create-prototype.mdc](mdc:.cursor/rules/design/03-create-prototype.mdc)**: プロトタイプ作成ルール・実装範囲・命名規則

---

## 🚦 参照タイミング・活用フロー

### 1. プロジェクト開始前
- [01-core.mdc] で基本方針・品質基準を確認
- [05-workflow.mdc] で全体フロー・参照ガイドを把握

### 2. 要件分析・設計
- [02-archtecture.mdc] でディレクトリ構成・タスク分解・分析テンプレートを活用
- UI設計が必要な場合は [design/01-design-core.mdc] で認知科学的ルールを確認

### 3. 実装・TDD
- [03-frontend.mdc] でReact/TypeScript実装・状態管理・パフォーマンス指針を参照
- [05a-tdd-cycle.mdc] でTDDサイクル詳細・実践例を参照
- [06-testing.mdc] でテスト環境・mock・test-utilsの自動化パターンを確認

### 4. 品質チェック・緊急対応
- [04-quality.mdc] でESLint/型/ビルド/CI/CD/パフォーマンス基準を確認
- [05b-tdd-check.mdc] で品質チェックリスト・段階的実装を実施
- 問題発生時は [05c-tdd-emergency.mdc] で緊急対応・3回ルール・代替戦略を参照

### 5. UIカタログ・プロトタイプ
- [design/02-ui-catalog.mdc] でStorybook/コンポーネント昇格ルールを確認
- [design/03-create-prototype.mdc] でプロトタイプ作成範囲・命名規則・品質チェックを参照

---

## 🗺️ ルール依存関係・参照フロー

```mermaid
graph TD
    CORE[01-core] --> WF[05-workflow]
    WF --> ARCH[02-archtecture]
    WF --> FE[03-frontend]
    WF --> QUAL[04-quality]
    WF --> TDDC[05a-tdd-cycle]
    WF --> TDDCHK[05b-tdd-check]
    WF --> EMG[05c-tdd-emergency]
    WF --> TEST[06-testing]
    ARCH --> DESIGN1[design/01-design-core]
    DESIGN1 --> DESIGN2[design/02-ui-catalog]
    DESIGN1 --> DESIGN3[design/03-create-prototype]
```

---

## 📝 ルール活用のベストプラクティス

- **P0（絶対必須）**: [01-core][05-workflow] で全体方針・品質基準を徹底
- **P1（推奨）**: 設計・実装・テスト・UI設計・プロトタイプ作成時に各専門mdcを都度参照
- **P2（理想）**: 品質・パフォーマンス・アクセシビリティの継続的改善を [05b-tdd-check] で推進
- **緊急時**: [05c-tdd-emergency] で3回ルール・代替戦略を厳守

---

## 📋 依頼・タスク分解時のチェックリスト
- [ ] どのルールファイルを参照すべきか明確か
- [ ] 設計・実装・テスト・UI設計・プロトタイプ作成の流れが明確か
- [ ] 品質基準・段階的実装・緊急対応の参照先が明確か
- [ ] 依存関係・参照フローが理解できているか

---

**このガイドを活用し、全ルールを適切なタイミングで参照することで、効率的かつ高品質な開発を実現してください。**