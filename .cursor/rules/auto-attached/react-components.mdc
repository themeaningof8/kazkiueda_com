---
description: 
globs: **/*.tsx,**/components/**/*.tsx
alwaysApply: false
---
# React Components Best Practices

## Component Definition
- Keep components focused on a single responsibility
- Prefer composition over inheritance
- Use descriptive names that convey the component's purpose
- Extract reusable logic into custom hooks

## Props and State
- Use TypeScript interfaces for prop definitions
- Validate props with proper TypeScript types
- Avoid deeply nested prop objects
- Use default props sparingly and prefer default parameters

## Performance
- Use React.memo for expensive components
- Avoid creating objects and functions in render
- Use useMemo and useCallback judiciously
- Implement Skeleton components for data loading states in props

## Component Structure
- Keep JSX readable with proper indentation
- Extract complex logic into custom hooks
- Use early returns to reduce nesting
- Group related functionality together

## Accessibility
- Include proper ARIA attributes
- Ensure keyboard navigation works
- Use semantic HTML elements
- Provide meaningful alt text for images

## Testing
- Write tests for component behavior, not implementation
- Test user interactions and edge cases
- Mock external dependencies appropriately
- Use testing-library best practices 