---
description: 
globs: 
alwaysApply: true
---
# 🏗️ アーキテクチャ設計

## ディレクトリ構成
Bulletproof + Feature-Based の良いとこ取り構成で、ディレクトリは必要に応じ作成。
コロケーション原則に基づきファイルを管理。

```
src/
├── app/              ← アプリケーション
├── components/       ← 共通コンポーネント
│   ├── ui/           ← UIコンポーネント（shadcn）
│   ├── business/     ← features内で3回以上再利用されるもの
│   └── layout/       ← レイアウトテンプレート
├── features/         ← 機能開発用ディレクトリ（基本はここで開発）
│   ├── auth/
│   │   ├── components/
│   │   │   ├── Button/
│   │   │   │   ├── Button.tsx
│   │   │   │   ├── Button.test.ts      ← コロケーション配置
│   │   │   │   └── Button.stories.ts   ← コロケーション配置
│   │   │   └── ...
│   │   ├── hooks/
│   │   └── ...
│   └── products/
│       ├── components/
│       ├── hooks/
│       └── ...
├── hooks/            ← カスタムフック
├── lib/              ← ユーティリティ
└── style/            ← CSS
```

## 共通コンポーネント昇格の条件
- **新規作成**: 必ずfeature内からスタート
- **3回ルール**: 3箇所で使用されたら移動を検討
- **段階的昇格**: 汎用化は段階的に実施
- **定期レビュー**: 月1回程度でコンポーネントの配置を見直し
- **チーム合意**: 移動判断はチーム全体で決定

## アーキテクチャ図
[実装に応じてここにアーキテクチャ図をMarmaidで記載]

## タスク分解・管理

### PMとしての分析手順
タスクをProject Rulesに基づいて分析し、`[タスク名].md`を`./docs`に作成。
特に [05-workflow.mdc](mdc:.cursor/rules/05-workflow.mdc) に基づくTDD開発でのTODO分解を意識。

### タスク分解テンプレート

```markdown
# {依頼タスク名}

## タスクの概要
[分析したタスクの概要を記載]

### DOMツリー図
[作成するコンポーネント名と責務をyaml形式で記載]

### shadcn-ui使用判定
はい / いいえ

### 使用するコンポーネント
[必要なコンポーネント名をリスト表示]

## アーキテクチャ図
[実装のアーキテクチャ図をMermaid図として記載]

## TODOリスト
[設計に基づく実装のTDDサイクルをチェックリスト形式で配置]

## 技術的考慮事項
[イレギュラーな実装方針やバージョン情報について記載]
```