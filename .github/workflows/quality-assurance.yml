name: Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 1. リンティングとフォーマット（最初に実行）
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Run linting and formatting checks
        run: bun run check

  # 2. セキュリティと依存関係チェック（lintと並列実行可能）
  security:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Run security audit
        run: bun audit

  # 3. コード分析（lintと並列実行可能）
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Run Knip unused code analysis
        run: |
          echo "Checking for unused code and dependencies..."
          bun run analyze:unused || echo "Knip found issues but continuing..."
        shell: bash
        continue-on-error: true

      - name: Generate Knip reports
        run: |
          echo "Generating detailed analysis reports..."
          bun run analyze:unused:reports || echo "Report generation failed but continuing..."
        shell: bash
        continue-on-error: true

      - name: Upload Knip reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: knip-reports-${{ github.job }}-${{ github.run_id }}
          path: |
            knip.json
          retention-days: 30

  # 4. 依存関係分析（lintと並列実行可能）
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Install Graphviz for Madge
        run: |
          if [ "$RUNNER_OS" = "macOS" ]; then
            brew install graphviz
          elif [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y graphviz
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install graphviz
          fi
        shell: bash

      - name: Run Madge circular dependency check
        run: |
          echo "Checking for circular dependencies..."
          bun run madge:circular
          echo "Checking for orphan modules..."
          bun run madge:orphans
          echo "Checking for leaf modules..."
          bun run madge:leaves
        shell: bash

      - name: Upload Madge dependency graphs as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-graphs-${{ github.job }}-${{ github.run_id }}
          path: |
            *.svg
            dependency-graph.gv
          retention-days: 30

  # 5. ビルド（リント成功後）
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Build application
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # 6. ユニットテスト（ビルドと並列実行可能）
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Run unit tests
        run: bun run test

  # 7. カバレッジテスト（ユニットテストと並列実行可能）
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Run test coverage
        run: bun run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # 8. E2Eテスト（全ての前段階テスト成功後）
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build, unit-tests, coverage, code-analysis, dependency-analysis]
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/bun.lockb', '**/playwright.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Setup Playwright
        run: bunx playwright install --with-deps

      - name: Run E2E tests
        run: bun run test:e2e

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7 